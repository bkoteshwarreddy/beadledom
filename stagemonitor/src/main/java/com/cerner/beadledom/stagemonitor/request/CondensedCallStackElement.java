package com.cerner.beadledom.stagemonitor.request;

import com.google.common.collect.Lists;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.stagemonitor.requestmonitor.profiler.CallStackElement;

/**
 * An implementation of {@link CallStackElement} that has a condensed signature.
 *
 * <p>The condensed callstack condenses the package names down to first letters, but leaves the
 * class name and method intact. For example:
 * {@code void org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service(HttpServletRequest, HttpServletResponse)}
 * would become {@code void o.j.r.p.s.s.HttpServletDispatcher.service(HttpServletRequest, HttpServletResponse)}.
 *
 * @author John Leacox
 * @since 1.0
 */
public class CondensedCallStackElement extends CallStackElement {
  private static final Logger LOGGER = LoggerFactory.getLogger(CondensedCallStackElement.class);

  private CondensedCallStackElement(CallStackElement callStackElement) {
    this.setSignature(callStackElement.getSignature());
    this.setExecutionTime(callStackElement.getExecutionTime());
  }

  /**
   * Creates a new instance of {@link CondensedCallStackElement} by copying the specified
   * {@link CallStackElement}.
   */
  public static CondensedCallStackElement of(CallStackElement callStackElement) {
    CondensedCallStackElement condensedCallStackElement =
        new CondensedCallStackElement(callStackElement);

    List<CallStackElement> children = Lists.newArrayList();
    for (CallStackElement child : callStackElement.getChildren()) {
      CondensedCallStackElement condensedChild = of(child);
      children.add(condensedChild);
      condensedChild.setParent(condensedCallStackElement);
    }
    condensedCallStackElement.setChildren(children);

    return condensedCallStackElement;
  }

  /**
   * Returns the signature with the packages names shortened to only include the first character.
   *
   * @return the condensed signature. e.g. {@code void org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service(HttpServletRequest, HttpServletResponse)}
   *     would return {@code void o.j.r.p.s.s.HttpServletDispatcher.service(HttpServletRequest,
   *     HttpServletResponse)}
   */
  @Override
  public String getSignature() {
    String signature = super.getSignature();

    if (signature.indexOf('(') == -1) {
      return signature;
    }

    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug("Condensing signature [{}]", signature);
    }

    int returnTypeSpace = signature.indexOf(" ");

    StringBuilder sb = new StringBuilder(100);
    sb.append(signature.substring(0, returnTypeSpace + 1));

    // Have to replace ".." to "." for classes generated by guice. e.g.
    // Object com.cerner.beadledom.health.resource.AvailabilityResource..FastClassByGuice..77b09000.newInstance(int, Object[])
    String[] parts =
        signature.replaceAll("\\.\\.", ".").substring(returnTypeSpace + 1).split("\\.");

    for (int i = 0; i < parts.length - 2; i++) {
      // Shorten each package name to only include the first character
      sb.append(parts[i].charAt(0)).append(".");
    }
    sb.append(parts[parts.length - 2]).append(".").append(parts[parts.length - 1]);
    return sb.toString();
  }
}
